#Email Similarity
"""In this project, you will use scikit-learnâ€™s Naive Bayes implementation on several different datasets. By reporting the accuracy of the classifier, we can find which datasets are harder to distinguish. """

from sklearn.datasets import fetch_20newsgroups
from sklearn.naive_bayes import MultinomialNB
from sklearn.feature_extraction.text import CountVectorizer


#Making the Training and Test Sets
train_emails = fetch_20newsgroups( categories = ['soc.religion.christian','talk.religion.misc'] ,subset = "train" , shuffle = True , random_state = 108) 

test_emails = fetch_20newsgroups(categories = ['soc.religion.christian','talk.religion.misc'],subset = "test" , shuffle = True , random_state = 108) 

#Counting Words
counter = CountVectorizer()
counter.fit(test_emails.data + train_emails.data) 

train_counts = counter.transform(train_emails.data) 
test_counts = counter.transform(test_emails.data)

#Making a Naive Bayes Classifier
classifier = MultinomialNB()
classifier.fit(train_counts ,train_emails.target)
print(classifier.score(test_counts , test_emails.target))

